import groovy.swing.SwingBuilder;

apply plugin: 'com.android.application'

// based on https://www.timroes.de/2014/01/19/using-password-prompts-with-gradle-build-files/
def readPassword(String fmt) {
    def ret = ''
    if (System.console() == null) {
        new SwingBuilder().edt {
            dialog(modal: true,
                    title: 'Enter password',
                    alwaysOnTop: true,
                    resizable: false,
                    locationRelativeTo: null,
                    pack: true,
                    show: true
            ) {
                vbox {
                    label(text: fmt)
                    input = passwordField()
                    button(defaultButton: true, text: 'OK', actionPerformed: {
                        ret = new String(input.password);
                        dispose();
                    })
                }
            }
        }
    } else {
        ret = new String(System.console().readPassword("\n\$ $fmt"));
    }
    return ret;
}

if (project.hasProperty("ServalChat.properties")) {
    def propFile = file(project.property("ServalChat.properties"))
    if (propFile.exists()) {
        println "Loading additional properties from $propFile"
        def props = new Properties();
        props.load(new FileInputStream(propFile))
        for (p in props) {
            def value = p.value
            if (value.startsWith("./"))
                value = new File(propFile.getParent(), value.substring(2)).absolutePath
            println "${p.key} = $value"
            project.ext[p.key] = value
        }
    }
}

android {
    compileSdkVersion 27

    ext{
        appName = "ServalChat"
        commitCount = "git rev-list --count HEAD".execute().text.toInteger();
        gitDescribe = "git describe --always --dirty --tags".execute().text.trim();
        commitSha = "git rev-parse HEAD".execute().text.trim();
        libSodiumStatus = "git describe --always --dirty --tags".execute(null, file('src/main/jni/libsodium')).text.trim();
        cleanBuild = !gitDescribe.contains('-dirty')
        releaseType = "development"
        buildTime = System.currentTimeMillis();

        if (cleanBuild) {
            // work out what kind of build this is based on the most recent git tag
            if (gitDescribe ==~ /[\d.]+/)
                releaseType = "release"
            else if (gitDescribe ==~ /[\d.]+.RC\d+/)
                releaseType = "beta"
            else
                releaseType = "alpha"
        }
        println "Version $commitCount - $releaseType - $gitDescribe"
    }

    defaultConfig {
        applicationId "org.servalproject.servalchat"
        minSdkVersion 14
        targetSdkVersion 27
        versionCode commitCount
        versionName gitDescribe
        // unique, deterministic identifier for an apk compiled from this source code
        buildConfigField "String", "BuildStamp", ("\"" + commitSha + (cleanBuild ? "" : "-" + new Date().getTime()) + "\"");
        buildConfigField "String", "CommitSha", ("\"" + commitSha + "\"");

        externalNativeBuild {
            ndkBuild{
                abiFilters = ["armeabi-v7a", "arm64-v8a","x86", "x86_64"]
                arguments += "-j${Runtime.runtime.availableProcessors()}".toString()
            }
        }
    }

    externalNativeBuild {
        ndkBuild{
            path = 'src/main/jni/Android.mk'
        }
    }

    signingConfigs {
        release {
            storeFile = project.hasProperty("release.key.store") ?
                    file(project.property("release.key.store")) : null
            if (storeFile && !storeFile.exists())
                storeFile = null;
            // leave blank to force prompting the user
            // but not null so that android thinks it is already configured
            storePassword = ""
            keyAlias = project.findProperty("release.key.alias")
            keyPassword = ""
            v2SigningEnabled = false
        }
    }

    buildTypes {
        debug {
            def manifestId = project.findProperty("debug.manifest.id")
            buildConfigField "String", "ManifestId", manifestId == null ? "null" : "\"$manifestId\"";
            buildConfigField "long", "ManifestVersion", "${buildTime}L";
            buildConfigField "String", "ReleaseType", ("\"debug\"");
        }
        release {
            minifyEnabled false
            proguardFiles.add(file('proguard-android.txt'))
            def manifestId = project.findProperty("${releaseType}.manifest.id")
            buildConfigField "String", "ManifestId", manifestId == null ? "null" : "\"$manifestId\"";
            buildConfigField "long", "ManifestVersion", releaseType == "development" ? "${buildTime}L" : "$commitCount";
            buildConfigField "String", "ReleaseType", ("\"" + releaseType + "\"");
            // leave the apk unsigned for a release build if config is missing
            if (signingConfigs.release.storeFile)
                signingConfig signingConfigs.release
        }
    }

    sourceSets.main {
        java.srcDirs += 'src/main/jni/serval-dna/java-api/src'
    }

    task libsodiumBuild

    [
            "armv7-a":"armv7-a",
            "x86":"i686",
            "x86_64":"westmere",
            "armv8-a":"armv8-a"
    ].each { abi,target ->
        task "libsodium${abi}" (type: Exec) {
            // this should only run when the libsodium submodule changes
            inputs.property("commit", libSodiumStatus);
            outputs.file("src/main/jni/libsodium/libsodium-android-${target}/lib/libsodium.a")
            workingDir 'src/main/jni/libsodium'
            executable 'sh'

            args = ['-c', "dist-build/android-${abi}.sh"]
            environment ANDROID_NDK_HOME: "$android.ndkDirectory"
            environment NDK_PLATFORM: "android-16"
        }
        libsodiumBuild.dependsOn "libsodium${abi}"
    }

    task hostServald(type: Exec) {
        // assumes that autoconf && configure have been run manually
        inputs.files(fileTree(dir: 'src/main/jni/serval-dna', includes: ['*.c', '*.h']))
        outputs.file('src/main/jni/serval-dna/servald')
        workingDir 'src/main/jni/serval-dna'
        commandLine "make", '-j', Runtime.runtime.availableProcessors(), 'servald'
    }

}

ext {
    supportLibraryVersion = '27.1.0'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.android.support:appcompat-v7:$supportLibraryVersion"
    implementation "com.android.support:design:$supportLibraryVersion"
    implementation "com.android.support:recyclerview-v7:$supportLibraryVersion"
    testImplementation 'junit:junit:4.12'
    implementation project(':annotations')
}

def keyring = project.findProperty("serval.keyring")
def keyringFile = keyring ? file(keyring) : null
if (keyringFile && !keyringFile.exists())
    keyringFile = null;
def entryPin = null;

android.applicationVariants.all { variant ->

    def variantName = variant.name.capitalize()
    def confType = "debug"
    if (variant.buildType.name == "release")
        confType = android.releaseType

    def manifestId = project.findProperty("${confType}.manifest.id");
    def secret = project.findProperty("${confType}.manifest.secret");
    def author = project.findProperty("${confType}.manifest.author");
    def bk = project.findProperty("${confType}.manifest.bk");

    tasks["externalNativeBuild$variantName"].dependsOn libsodiumBuild

    variant.outputs.all { output ->
        if (confType == "release")
            output.outputFileName = "${android.appName}-${variant.versionName}.apk"
        else
            output.outputFileName = "${android.appName}-${confType}-${variant.versionName}.apk"
    }

    if (project.tasks.findByName("validateSigning${variantName}")){
        // post process the output apk, but only if it will be signed
        if (variant.signingConfig && variant.signingConfig.storeFile) {
            // get a writable ref to the signing config
            def configName = variant.signingConfig.name
            def signConfig = android.signingConfigs.findByName(configName);
            // Note that Android studio can supplying signing config from somewhere else
            if (signConfig != null && (!signConfig.storePassword || !signConfig.keyPassword)) {
                if (!project.tasks.findByName("prompt${configName}Pwd")) {
                    task "prompt${configName}Pwd" {
                        doLast {
                            if (!signConfig.storePassword)
                                signConfig.storePassword = readPassword("Enter password for ${variant.signingConfig.name} jar signing keystore:")
                            if (!signConfig.keyPassword)
                                signConfig.keyPassword = readPassword("Enter password for ${variant.signingConfig.name} jar signing key:")
                        }
                    }
                    // run prompt tasks first
                    preBuild.mustRunAfter "prompt${configName}Pwd"
                }
                tasks["validateSigning${variantName}"].dependsOn "prompt${configName}Pwd"
            }
        }

        if (keyringFile != null && author != null && entryPin == null){
            if (!project.tasks.findByName("prompt${author}Pin")) {
                task "prompt${author}Pin" {
                    doLast {
                        entryPin = readPassword("Enter ${confType} serval keyring entry pin:")
                    }
                }
                // run prompt tasks first
                preBuild.mustRunAfter "prompt${author}Pin"
            }
            tasks["validateSigning${variantName}"].dependsOn "prompt${author}Pin"
        }

        variant.outputs.all { output ->
            // add a manifest to output apk
            // TODO supported method to seed the manifest id?
            if (manifestId && (secret || (author && keyring))) {
                def taskName = "manifest$variantName"
                task "$taskName"(type: Exec, dependsOn: hostServald) {
                    environment SERVALINSTANCE_PATH: file('build/serval/').absolutePath
                    if (keyringFile != null && author != null) {
                        environment SERVALD_KEYRING_READONLY: "true"
                        environment SERVALD_KEYRING_PATH: keyring
                    }
                    executable = hostServald.outputs.files[0]
                    doFirst {
                        args = ['rhizome', 'add', 'file']
                        if (keyringFile != null && author != null && entryPin)
                            args += "--entry-pin=$entryPin"
                        args += [
                                '--zip-comment',
                                author ?: "",
                                output.outputFile,
                                '',
                                secret ?: "",
                                "service=file",
                                "name=${output.outputFileName}"
                        ]
                        if (manifestId)
                            args += "id=$manifestId"
                        if (bk)
                            args += "BK=$bk"
                        if (android.cleanBuild && confType != "development")
                            args += "version=$variant.versionCode"
                        else
                            args += "version=$android.buildTime"
                    }
                    doLast {
                        delete(file('build/serval/'))
                    }
                }
                tasks["$taskName"].dependsOn "package$variantName"

                output.assemble.dependsOn "$taskName"
            }
        }
    }
}
